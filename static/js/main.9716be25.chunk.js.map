{"version":3,"sources":["сomponents/ContactList/ContactList.module.css","сomponents/Filter/Filter.module.css","сomponents/Alert/Alert.module.css","сomponents/App/App.module.css","redux/contacts/contacts-actions.js","сomponents/Alert/Alert.js","сomponents/ContactForm/ContactForm.jsx","сomponents/ContactList/ContactList.jsx","сomponents/Filter/Filter.jsx","сomponents/App/App.js","redux/contacts/contacts-reducer.js","redux/contacts/store.js","index.js","сomponents/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","data","payload","id","shortid","generate","name","number","deleteContact","changeFilter","Alert","className","s","alertBox","alert","ContactForm","state","error","nameInputId","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","contacts","find","items","elements","setTimeout","onSubmit","reset","this","CSSTransition","in","appear","classNames","timeout","unmountOnExit","form","label","htmlFor","input","type","onChange","button","Component","defaultProps","connect","dispatch","contactsActions","getFilterContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","onDeleteContact","TransitionGroup","component","ContactList","map","ContactList_item","onClick","onChangeFilter","target","App","container","title","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","console","log","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9716be25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__iYJYk\",\"ContactList_item\":\"ContactList_ContactList_item__heW7m\",\"button\":\"ContactList_button__aTTVE\",\"enter\":\"ContactList_enter__nt9Z1\",\"enterActive\":\"ContactList_enterActive__2SWY7\",\"exit\":\"ContactList_exit__mLv5D\",\"exitActive\":\"ContactList_exitActive__2Qus0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__253fE\",\"input\":\"Filter_input__29Koh\",\"form\":\"Filter_form__3bs4J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertBox\":\"Alert_alertBox__3_7_M\",\"alert\":\"Alert_alert__1jaFd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__EljwE\",\"title\":\"App_title__2Dfpf\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/Add', data => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name: data.name,\r\n      number: data.number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction('contacts/Delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import React from 'react';\r\nimport s from './Alert.module.css';\r\n\r\nconst Alert = () => (\r\n  <div className={s.alertBox}>\r\n    <h2 className={s.alert}>Contact already exists!</h2>\r\n  </div>\r\n);\r\n\r\nexport default Alert;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid'\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Alert from '../Alert/Alert';\r\nimport '../../css/animation.css';\r\nimport s from './ContactForm.module.css'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    error: false\r\n    }\r\n\r\n    nameInputId = shortid.generate();\r\n    numberInputId = shortid.generate();\r\n\r\n    handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n    };\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { contacts } = this.props;\r\n        if (contacts.find((items) => items.name === e.currentTarget.elements[0].value)) {\r\n            this.setState(() => {\r\n                return {\r\n                    error: true,\r\n                };\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.setState(() => {\r\n                    return {\r\n                        error: false,\r\n                    };\r\n                });\r\n            }, 2500);\r\n            return;\r\n        }\r\n        this.props.onSubmit(this.state);\r\n        this.reset();\r\n    }\r\n    reset = () => {\r\n        this.setState({ name: \"\", number: \"\" })\r\n    }\r\n      render() {\r\n          return (\r\n              <div>\r\n                  {this.state.error ? \r\n        <CSSTransition\r\n                    in={this.state.error}\r\n                    appear={true}\r\n                    classNames=\"error\"\r\n                    timeout={250}\r\n                    unmountOnExit\r\n                    >\r\n          <Alert />\r\n        </CSSTransition> :\r\n                      < form onSubmit={this.handleSubmit} >\r\n                         <div className={s.form}>\r\n                              <label className={s.label} htmlFor={this.nameInputId}>\r\n                                  Name\r\n              <input className={s.input}\r\n                                      type=\"text\"\r\n                                      name=\"name\"\r\n                                      value={this.state.name}\r\n                                      onChange={this.handleChange}\r\n                                      id={this.nameInputId}\r\n                                  />\r\n                              </label>\r\n                              <label className={s.label} htmlFor={this.numberInputId}>\r\n                                  Number\r\n              <input className={s.input}\r\n                                      type=\"text\"\r\n                                      name=\"number\"\r\n                                      value={this.state.number}\r\n                                      onChange={this.handleChange}\r\n                                      id={this.numberInputId}\r\n                                  />\r\n                              </label>\r\n                              <button className={s.button} type=\"submit\">Add contact</button>\r\n                          </div>\r\n                      </form >\r\n                  }\r\n                  </div>\r\n                \r\n        );\r\n    }\r\n}\r\n\r\nContactForm.defaultProps = {\r\n    type: 'text',\r\n    name: null,\r\n};\r\n\r\nContactForm.propTypes = {\r\n    type: PropTypes.string,\r\n    name: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: state.contacts.items,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: data => dispatch(contactsActions.addContact(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\nimport s from './ContactList.module.css'\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <TransitionGroup component='ul' className={s.ContactList}>\r\n    {contacts.map(({ id, name, number }) =>\r\n      <CSSTransition key={id} timeout={250}\r\n      classNames={s}>\r\n                <li className={s.ContactList_item} >\r\n                {name}: {number}\r\n                <button className={s.button} onClick={() => onDeleteContact(id)}>Delete</button>\r\n      </li>\r\n    </CSSTransition>)}\r\n            </TransitionGroup>\r\n    \r\n        )\r\n\r\n\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n  onDeleteContact: PropTypes.func,\r\n};\r\n\r\nconst getFilterContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  \r\n  return allContacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n\r\nconst mapStateToProps = ({contacts: {items,filter}}) => ({\r\n  contacts: getFilterContacts(items, filter)\r\n  \r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChangeFilter}) => {\r\n  return (\r\n    <div className={s.form}>\r\n          <label className={s.label} >\r\n            Find contacts by name\r\n            <input className={s.input}\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={onChangeFilter}\r\n            ></input>\r\n      </label>\r\n      </div>\r\n     )\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToPtops = (state) => ({\r\n  value: state.contacts.filter,\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChangeFilter: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n})\r\n\r\n\r\nexport default connect(mapStateToPtops,mapDispatchToProps)(Filter);","import React from 'react';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport s from './App.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport '../../css/animation.css';\n\nconst App = () => (\n  <div className={s.container}>\n    <CSSTransition in={true} appear={true} classNames=\"fade\" timeout={500}>\n      <h1 className={s.title}>Phonebook</h1>\n    </CSSTransition>\n    <ContactForm />\n\n    <CSSTransition in={true} classNames=\"fade\" timeout={500} unmountOnExit>\n      <Filter />\n    </CSSTransition>\n\n    <CSSTransition in={true} classNames=\"fade\" timeout={250} unmountOnExit>\n      <ContactList />\n    </CSSTransition>\n  </div>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './сomponents/App/App';\nimport store from './redux/contacts/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nconsole.log(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__1SbIR\",\"form\":\"ContactForm_form__1jlLw\",\"input\":\"ContactForm_input__oddZd\",\"button\":\"ContactForm_button__6OAqo\"};"],"sourceRoot":""}